import os
import io
import csv
import json
import asyncio
import html
from typing import List, Optional
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
import logging

from telegram import (
	Update,
	InlineKeyboardButton,
	InlineKeyboardMarkup,
	constants,
	Document,
	BotCommand,
	ReplyKeyboardMarkup,
	KeyboardButton,
	ReplyKeyboardRemove,
)
from telegram.ext import (
	Application,
	ApplicationBuilder,
	CommandHandler,
	MessageHandler,
	CallbackQueryHandler,
	ContextTypes,
	filters,
)

from db import (
    init_db,
    migrate_schema,
    import_restaurants_from_json,
    import_restaurants_from_csv_rows,
    count_restaurants,
    get_random_restaurant,
    create_event,
    get_latest_event_for_chat,
    toggle_participation,
    list_participant_usernames,
    set_reminder,
    mark_reminder_sent,
    mark_feedback_prompt_sent,
    save_review,
    get_event_with_details,
    get_due_reminders,
    get_due_feedback_prompts,
    get_stats,
    get_stats_for_chat,
    get_all_feedback_to_schedule,
    get_event_by_feedback_message,
    get_reviews_for_event,
    cancel_participation,
    get_user_penalty,
    clear_user_penalty,
    get_participants_without_review,
    is_participant,
    is_event_completed,
    get_joined_participants_count,
    get_upcoming_events,
    delete_event_with_relations,
    mark_event_completed,
    count_distinct_reviews,
    clear_reviews_by_restaurant_name,
    ensure_demo_visit,
    cleanup_demo_data,
    get_random_restaurant_for_chat,
)

# ---- Helpers for reviews formatting/toggler ----
def _calc_reviews_stats(reviews: List[dict]) -> tuple[int, Optional[float], str]:
    count = len(reviews)
    ratings = [int(r["rating"]) for r in reviews if r["rating"] is not None]
    avg = round(sum(ratings) / len(ratings), 1) if ratings else None
    stars = ""
    if avg is not None:
        stars = "‚≠ê" * int(round(avg))
    return count, avg, stars


def _format_event_text(event_row, reviews: List[dict], *, include_reviews: bool) -> str:
    name = event_row["r_name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    address = event_row["r_address"] or "‚Äî"
    cuisine = event_row["r_cuisine"] or "‚Äî"
    count, avg, stars = _calc_reviews_stats(reviews)

    lines: List[str] = []
    lines.append(f"<b>{html.escape(name)}</b>")
    lines.append(f"üìç {html.escape(address)}")
    lines.append(f"üç¥ {html.escape(cuisine)}")

    rating_line = f"–û—Ç–∑—ã–≤—ã: {count}"
    if avg is not None:
        rating_line += f" ‚Äî {avg:.1f} {stars}"
    lines.append(rating_line)

    if include_reviews:
        if reviews:
            lines.append("")
            for rev in reviews:
                username = rev["username"] or "–ê–Ω–æ–Ω–∏–º"
                rating = int(rev["rating"]) if rev["rating"] is not None else None
                rating_stars = "‚≠ê" * rating if rating else ""
                text = html.escape(rev["text"] or "")
                username_escaped = html.escape(username)
                entry = f"{username_escaped}: {rating_stars} {text}".strip()
                lines.append(entry)
        else:
            lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")

    return "\n".join(lines)


def _build_reviews_keyboard(event_id: int, *, show_reviews: bool) -> InlineKeyboardMarkup:
    label = "–°–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤—ã" if show_reviews else "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"
    action = "hide" if show_reviews else "show"
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(label, callback_data=f"reviews:{event_id}:{action}")]]
    )

# –∑–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
_tz_env = os.getenv("TIMEZONE", "Europe/Moscow")
try:
    ZoneInfo(_tz_env)
    TIMEZONE = _tz_env
except Exception:
    TIMEZONE = "Europe/Moscow"
    logger.warning("Invalid TIMEZONE env; fallback to Europe/Moscow")
# fallback –∫ RENDER_EXTERNAL_URL, –µ—Å–ª–∏ WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL") or os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PORT = int(os.getenv("PORT", "8080"))


def _fmt_restaurant_card(row, participants: List[str]) -> str:
	name = row["name"]
	address = row["address"] or "‚Äî"
	cuisine = row["cuisine"] or "‚Äî"
	description = row["description"] or "‚Äî"
	avg_check = row["average_check"] or "‚Äî"
	participants_line = ", ".join(participants) if participants else "–ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ"
	
	return (
		f"üçΩ <b>{name}</b>\n"
		f"{'‚îÄ' * 30}\n"
		f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
		f"üç¥ <b>–ö—É—Ö–Ω—è:</b> {cuisine}\n"
		f"üí∞ <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {avg_check}\n\n"
		f"üìù <i>{description}</i>\n"
		f"{'‚îÄ' * 30}\n"
		f"üë• <b>–ò–¥—É—Ç ({len(participants)}/3):</b> {participants_line}"
	)


async def _send_random_for_chat(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
    latest = get_latest_event_for_chat(chat_id)
    if latest:
        event_id = int(latest["id"])
        if is_event_completed(event_id):
            delete_event_with_relations(event_id)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=(
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–æ—Ö–æ–¥ (–Ω—É–∂–Ω—ã –æ—Ç–∑—ã–≤—ã –æ—Ç –≤—Å–µ—Ö 3 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤), "
                    "–∞ –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω."
                ),
            )
            return

    row = get_random_restaurant_for_chat(chat_id)
    if not row:
        await context.bot.send_message(chat_id=chat_id, text="–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª JSON/CSV.")
        return

    participants: List[str] = []
    text = _fmt_restaurant_card(row, participants)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –∏–¥—É! ‚úÖ", callback_data="join:pending")]])
    msg = await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.HTML, reply_markup=keyboard)

    event_id = create_event(chat_id=chat_id, restaurant_id=int(row["id"]), message_id=msg.message_id)
    keyboard2 = InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –∏–¥—É! ‚úÖ", callback_data=f"join:{event_id}")]])
    await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg.message_id, reply_markup=keyboard2)


async def _send_stats_for_chat(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    visited, upcoming = get_stats_for_chat(chat_id)
    total_cnt = count_restaurants()
    visited_cnt = len(visited)
    percent = (visited_cnt / total_cnt * 100) if total_cnt else 0

    lines: List[str] = []
    lines.append(f"<b>–í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤</b>: {total_cnt}")
    lines.append(f"<b>–ü–æ—Å–µ—â–µ–Ω–æ</b>: {visited_cnt} –∏–∑ {total_cnt} (‚âà{percent:.0f}%)")
    if upcoming:
        lines.append("")
        lines.append("<b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</b>:")
        for row in upcoming:
            name = row["name"]
            reminder = row["reminder_at_utc"]
            when = "–¥–∞—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            if reminder:
                try:
                    dt_local = datetime.fromisoformat(reminder).replace(tzinfo=timezone.utc).astimezone(ZoneInfo(TIMEZONE))
                    when = dt_local.strftime("%d.%m.%Y %H:%M")
                except Exception:
                    pass
            lines.append(f"‚Ä¢ {name} ‚Äî {when}")

    await context.bot.send_message(chat_id=chat_id, text="\n".join(lines), parse_mode=constants.ParseMode.HTML)

    if not visited:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    await context.bot.send_message(chat_id=chat_id, text="<b>–ü–æ—Å–µ—â—ë–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</b> ‚Äî –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤—ã.", parse_mode=constants.ParseMode.HTML)

    for row in visited:
        event_id = int(row["id"])
        event = get_event_with_details(event_id)
        if not event:
            continue
        reviews = get_reviews_for_event(event_id)
        text = _format_event_text(event, reviews, include_reviews=False)
        keyboard = _build_reviews_keyboard(event_id, show_reviews=False)
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.HTML, reply_markup=keyboard)


async def _send_upcoming_for_chat(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    rows = get_upcoming_events(chat_id)
    if not rows:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
        return
    local_tz = ZoneInfo(TIMEZONE)
    lines: List[str] = ["<b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è</b>:"]
    for r in rows:
        when = "–¥–∞—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        if r["reminder_at_utc"]:
            try:
                dt_local = datetime.fromisoformat(r["reminder_at_utc"]).replace(tzinfo=timezone.utc).astimezone(local_tz)
                when = dt_local.strftime("%d.%m.%Y %H:%M")
            except Exception:
                pass
        lines.append(f"‚Ä¢ {r['r_name']} ‚Äî {when}")
    await context.bot.send_message(chat_id=chat_id, text="\n".join(lines), parse_mode=constants.ParseMode.HTML)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	await update.message.reply_text(
		"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
		"/random_restaurant ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω\n"
		"/set_reminder DD.MM.YYYY HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏\n"
		"/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
		"–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON/CSV —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–∞–π–ª –≤ —á–∞—Ç.",
	)


async def random_restaurant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	chat_id = update.effective_chat.id
	await _send_random_for_chat(context, chat_id)


async def on_join_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	query = update.callback_query
	data = query.data or ""
	if not data.startswith("join:"):
		await query.answer()
		return
	parts = data.split(":", 1)
	if len(parts) != 2:
		await query.answer()
		return
	try:
		event_id = int(parts[1])
	except ValueError:
		await query.answer()
		return

	user = query.from_user
	joined, error_msg = toggle_participation(
		event_id=event_id,
		user_id=user.id,
		username=user.username,
		first_name=user.first_name,
	)
	
	# –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ (–ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
	if error_msg:
		await query.answer(error_msg, show_alert=True)
		return
	
	# –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
	event = get_event_with_details(event_id)
	if not event:
		await query.answer()
		return
	participants = list_participant_usernames(event_id)
	# –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å–Ω–æ–≤–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	restaurant = {
		"name": event["r_name"],
		"address": event["r_address"],
		"cuisine": event["r_cuisine"],
		"description": event["r_description"],
		"average_check": event["r_avg_check"],
	}
	text = _fmt_restaurant_card(restaurant, participants)
	
	# –ö–Ω–æ–ø–∫–∞ "–Ø –∏–¥—É" –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
	buttons = [
		[InlineKeyboardButton("–Ø –∏–¥—É! ‚úÖ", callback_data=f"join:{event_id}")],
	]
	# –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–∏—Å–∞–Ω
	if is_participant(event_id, user.id):
		buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Ö–æ–¥ ‚ùå", callback_data=f"cancel:{event_id}")])
	
	keyboard = InlineKeyboardMarkup(buttons)
	try:
		await context.bot.edit_message_text(
			chat_id=event["chat_id"],
			message_id=event["message_id"],
			text=text,
			parse_mode=constants.ParseMode.HTML,
			reply_markup=keyboard,
		)
	except Exception as e:
		logger.error(f"Failed to update message: {e}")
	
	# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
	penalty = get_user_penalty(user.id)
	answer_text = "–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!" if joined else "–í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏."
	if penalty > 0 and joined:
		answer_text += f" –£ –≤–∞—Å —à—Ç—Ä–∞—Ñ {penalty}‚ÇΩ –∑–∞ –æ—Ç–º–µ–Ω—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Ö–æ–¥–∞."
	await query.answer(answer_text, show_alert=False)

	# –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å —Ä–æ–≤–Ω–æ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –¥–∞—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø—Ä–æ—Å–∏–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
	if len(participants) == 3 and event["reminder_at_utc"] is None:
		await context.bot.send_message(
			chat_id=event["chat_id"],
			text="–í—Å–µ —Å–æ–≥–ª–∞—Å–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM",
		)


async def set_reminder_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	chat_id = update.effective_chat.id
	args_text = (update.message.text or "").strip()
	parts = args_text.split(maxsplit=1)
	if len(parts) < 2:
		await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_reminder DD.MM.YYYY HH:MM")
		return
	when_str = parts[1].strip()
	try:
		local_tz = ZoneInfo(TIMEZONE)
		dt_local = datetime.strptime(when_str, "%d.%m.%Y %H:%M").replace(tzinfo=local_tz)
		dt_utc = dt_local.astimezone(timezone.utc)
	except Exception as e:
		logger.error(f"Failed to parse date: {e}")
		await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY HH:MM")
		return

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º
	now_utc = datetime.now(timezone.utc)
	if dt_utc <= now_utc:
		await update.message.reply_text("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
		return
	# –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 20 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥
	if dt_utc > now_utc + timedelta(days=365*20):
		await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ. –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 20 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥.")
		return

	event = get_latest_event_for_chat(chat_id)
	if not event:
		await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —á–µ—Ä–µ–∑ /random_restaurant")
		return

	# –†–∞–∑—Ä–µ—à–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏
	cnt = get_joined_participants_count(int(event["id"]))
	if cnt < 3:
		await update.message.reply_text("–í—Ä–µ–º—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 3 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return

	event_id = int(event["id"])
	set_reminder(event_id=event_id, dt_utc=dt_utc)
	# –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
	for job_name in (f"reminder_{event_id}", f"feedback_{event_id}", f"daily_reviews_{event_id}"):
		for job in context.job_queue.get_jobs_by_name(job_name):
			job.schedule_removal()
	# –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω—è—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–µ–∑ –¥—É–±–ª–µ–π
	context.job_queue.run_once(send_reminder_job, when=dt_utc, data={"event_id": event_id}, name=f"reminder_{event_id}")
	context.job_queue.run_once(send_feedback_prompt_job, when=dt_utc + timedelta(hours=3), data={"event_id": event_id}, name=f"feedback_{event_id}")
	context.job_queue.run_repeating(
		remind_pending_reviews_job,
		interval=timedelta(days=1),
		first=dt_utc + timedelta(days=1),
		data={"event_id": event_id},
		name=f"daily_reviews_{event_id}",
	)

	await update.message.reply_text(
		f"‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\nüçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω: {event['r_name']}\nüìÖ –î–∞—Ç–∞: {dt_local.strftime('%d.%m.%Y %H:%M %Z')}"
	)


async def send_reminder_job(context: ContextTypes.DEFAULT_TYPE) -> None:
	data = context.job.data or {}
	event_id = int(data.get("event_id"))
	event = get_event_with_details(event_id)
	if not event:
		logger.warning(f"Event {event_id} not found for reminder")
		return
	participants = list_participant_usernames(event_id)
	participants_line = ", ".join(participants) if participants else "–ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ"
	# –í—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
	local_tz = ZoneInfo(TIMEZONE)
	rem_at_utc = event["reminder_at_utc"]
	desc_time = "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
	if rem_at_utc:
		try:
			dt_local = datetime.fromisoformat(rem_at_utc).replace(tzinfo=timezone.utc).astimezone(local_tz)
			desc_time = dt_local.strftime("%H:%M")
		except Exception as e:
			logger.error(f"Failed to parse reminder time: {e}")

	text = (
		f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –≤ {desc_time} –≤—ã –∏–¥—ë—Ç–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω {event['r_name']}! "
		f"–ê–¥—Ä–µ—Å: {event['r_address']}. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_line}"
	)
	try:
		await context.bot.send_message(chat_id=event["chat_id"], text=text)
		mark_reminder_sent(event_id)
		logger.info(f"Reminder sent for event {event_id}")
	except Exception as e:
		logger.error(f"Failed to send reminder for event {event_id}: {e}")


async def send_feedback_prompt_job(context: ContextTypes.DEFAULT_TYPE) -> None:
	data = context.job.data or {}
	event_id = int(data.get("event_id"))
	event = get_event_with_details(event_id)
	if not event:
		logger.warning(f"Event {event_id} not found for feedback prompt")
		return
	try:
		msg = await context.bot.send_message(
			chat_id=event["chat_id"],
			text=f"–ö–∞–∫ –≤–∞–º –±—ã–ª–æ –≤ {event['r_name']}? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–§–æ—Ä–º–∞—Ç: [–†–µ–π—Ç–∏–Ω–≥ 1-5 –∑–≤—ë–∑–¥] –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n–ü—Ä–∏–º–µ—Ä: 5 –û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ, –≤–µ—Ä–Ω—ë–º—Å—è!",
		)
		mark_feedback_prompt_sent(event_id, feedback_message_id=msg.message_id)
		logger.info(f"Feedback prompt sent for event {event_id}")
	except Exception as e:
		logger.error(f"Failed to send feedback prompt for event {event_id}: {e}")


async def remind_pending_reviews_job(context: ContextTypes.DEFAULT_TYPE) -> None:
	"""–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–≤—à–∏–º –æ—Ç–∑—ã–≤."""
	data = context.job.data or {}
	event_id = int(data.get("event_id"))
	event = get_event_with_details(event_id)
	if not event:
		logger.warning(f"Event {event_id} not found for pending review reminder")
		return
	
	pending = get_participants_without_review(event_id)
	if not pending:
		logger.info(f"No pending reviews for event {event_id}, stopping reminders")
		# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤—ã
		context.job.schedule_removal()
		return
	
	for p in pending:
		user_id = int(p["user_id"])
		username = p["username"] or p["first_name"] or "—É—á–∞—Å—Ç–Ω–∏–∫"
		try:
			await context.bot.send_message(
				chat_id=user_id,
				text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –≤—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ {event['r_name']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ!",
			)
			logger.info(f"Sent review reminder to user {user_id} for event {event_id}")
		except Exception as e:
			# –µ—Å–ª–∏ –ª–∏—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø–∏—à–µ–º –≤ –≥—Ä—É–ø–ø—É
			logger.warning(f"Failed to send DM to user {user_id}, sending to group: {e}")
			try:
				await context.bot.send_message(
					chat_id=event["chat_id"],
					text=f"@{username}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ {event['r_name']}!",
				)
			except Exception as e2:
				logger.error(f"Failed to send group reminder: {e2}")


async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await _send_stats_for_chat(context, update.effective_chat.id)


async def on_freeform_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY HH:MM –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = update.effective_chat.id
    when_str = (update.message.text or "").strip()
    logger.info(f"Processing datetime input: '{when_str}' in chat {chat_id}")
    
    try:
        local_tz = ZoneInfo(TIMEZONE)
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        dt_local = None
        for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y %H.%M", "%d.%m.%Y %H-%M"):
            try:
                dt_local = datetime.strptime(when_str, fmt).replace(tzinfo=local_tz)
                break
            except ValueError:
                continue
        
        if dt_local is None:
            raise ValueError("No matching format")
            
        dt_utc = dt_local.astimezone(timezone.utc)
    except Exception as e:
        logger.warning(f"Freeform datetime parse failed for '{when_str}': {e}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY HH:MM\n–ü—Ä–∏–º–µ—Ä: 25.12.2024 13:00")
        return

    now_utc = datetime.now(timezone.utc)
    if dt_utc <= now_utc:
        await update.message.reply_text("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return
    if dt_utc > now_utc + timedelta(days=365*20):
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ. –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 20 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥.")
        return

    event = get_latest_event_for_chat(chat_id)
    if not event:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —á–µ—Ä–µ–∑ /random_restaurant")
        return

    cnt = get_joined_participants_count(int(event["id"]))
    if cnt < 3:
        await update.message.reply_text("–í—Ä–µ–º—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 3 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    event_id = int(event["id"])
    set_reminder(event_id=event_id, dt_utc=dt_utc)
    # —Å–Ω—è—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job_name in (f"reminder_{event_id}", f"feedback_{event_id}", f"daily_reviews_{event_id}"):
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
    # –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–µ
    context.job_queue.run_once(send_reminder_job, when=dt_utc, data={"event_id": event_id}, name=f"reminder_{event_id}")
    context.job_queue.run_once(send_feedback_prompt_job, when=dt_utc + timedelta(hours=3), data={"event_id": event_id}, name=f"feedback_{event_id}")
    context.job_queue.run_repeating(
        remind_pending_reviews_job,
        interval=timedelta(days=1),
        first=dt_utc + timedelta(days=1),
        data={"event_id": event_id},
        name=f"daily_reviews_{event_id}",
    )

    await update.message.reply_text(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\nüçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω: {event['r_name']}\nüìÖ –î–∞—Ç–∞: {dt_local.strftime('%d.%m.%Y %H:%M %Z')}"
    )


async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	message = update.message
	if not message or not message.document:
		return
	chat = update.effective_chat
	user = update.effective_user

	is_admin = False
	try:
		member = await context.bot.get_chat_member(chat_id=chat.id, user_id=user.id)
		is_admin = member.status in ("creator", "administrator")
	except Exception:
		pass

	if not is_admin and chat.type in ("group", "supergroup"):
		await message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.")
		return

	doc: Document = message.document
	file_name = (doc.file_name or "").lower()
	if not (file_name.endswith(".json") or file_name.endswith(".csv")):
		await message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .json –∏ .csv")
		return

	file = await context.bot.get_file(doc.file_id)
	file_bytes = await file.download_as_bytes()
	inserted = 0
	try:
		if file_name.endswith(".json"):
			data = json.loads(file_bytes.decode("utf-8"))
			inserted = import_restaurants_from_json(data)
		else:
			stream = io.StringIO(file_bytes.decode("utf-8"))
			reader = csv.DictReader(stream)
			rows = [row for row in reader]
			inserted = import_restaurants_from_csv_rows(rows)
		await message.reply_text(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {inserted}")
	except Exception as e:
		await message.reply_text(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")


async def on_cancel_trip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Ö–æ–¥'."""
	query = update.callback_query
	await query.answer()
	data = query.data or ""
	if not data.startswith("cancel:"):
		return
	parts = data.split(":", 1)
	if len(parts) != 2:
		return
	try:
		event_id = int(parts[1])
	except ValueError:
		return
	
	user = query.from_user
	# –æ—Ç–º–µ–Ω—è–µ–º —É—á–∞—Å—Ç–∏–µ –∏ —Å—Ç–∞–≤–∏–º —à—Ç—Ä–∞—Ñ
	cancel_participation(event_id, user.id)
	
	# –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
	event = get_event_with_details(event_id)
	if not event:
		return
	participants = list_participant_usernames(event_id)
	restaurant = {
		"name": event["r_name"],
		"address": event["r_address"],
		"cuisine": event["r_cuisine"],
		"description": event["r_description"],
		"average_check": event["r_avg_check"],
	}
	text = _fmt_restaurant_card(restaurant, participants)
	keyboard = InlineKeyboardMarkup(
		[[InlineKeyboardButton("–Ø –∏–¥—É! ‚úÖ", callback_data=f"join:{event_id}")]]
	)
	await context.bot.edit_message_text(
		chat_id=event["chat_id"],
		message_id=event["message_id"],
		text=text,
		parse_mode=constants.ParseMode.HTML,
		reply_markup=keyboard,
	)
	await query.answer("–ü–æ—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –®—Ç—Ä–∞—Ñ 500‚ÇΩ –±—É–¥–µ—Ç —É—á—Ç—ë–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ö–æ–¥–µ.", show_alert=True)


# ---------------------------------------------------------------------------
# –°–±—Ä–æ—Å —Å–æ–±—ã—Ç–∏—è –∞–¥–º–∏–Ω–æ–º (–æ—á–∏—â–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–∑—ã–≤—ã, –¥–∞—ë—Ç —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å)
# ---------------------------------------------------------------------------


async def on_reset_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∞ ‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."""
    query = update.callback_query
    await query.answer()

    data = query.data or ""
    if not data.startswith("reset:"):
        return

    parts = data.split(":", 1)
    if len(parts) != 2:
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        return

    user = query.from_user
    chat_id = query.message.chat_id if query.message else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    is_admin = False
    try:
        member = await context.bot.get_chat_member(chat_id=chat_id, user_id=user.id)
        is_admin = member.status in ("creator", "administrator")
    except Exception:
        pass

    if not is_admin:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.", show_alert=True)
        return

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    for job_name in (f"reminder_{event_id}", f"feedback_{event_id}", f"daily_reviews_{event_id}"):
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
    delete_event_with_relations(event_id)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ
    if query.message:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except Exception:
            pass

    await context.bot.send_message(
        chat_id=chat_id,
        text="–°–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —á–µ—Ä–µ–∑ /random_restaurant",
    )


async def on_text_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	message = update.message
	if not message or not message.text:
		return
	if not message.reply_to_message:
		return
	chat_id = update.effective_chat.id
	reply_id = message.reply_to_message.message_id
	# –∏—â–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ feedback_message_id
	event = get_event_by_feedback_message(chat_id=chat_id, feedback_message_id=reply_id)
	if not event:
		return

	text = message.text.strip()
	rating: Optional[int] = None
	if text and text[0].isdigit():
		try:
			d = int(text[0])
			if 1 <= d <= 5:
				rating = d
		except Exception as e:
			logger.warning(f"Failed to parse rating: {e}")

	success, reply_msg = save_review(
		event_id=int(event["id"]),
		user_id=update.effective_user.id,
		username=update.effective_user.username,
		text=text,
		rating=rating,
	)
	
	if not success:
		await message.reply_text(reply_msg)
		return
	
	# —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ (—á–µ–ª–æ–≤–µ–∫ ¬´–æ—Ç—Ä–∞–±–æ—Ç–∞–ª¬ª –ø–æ—Ö–æ–¥)
	clear_user_penalty(update.effective_user.id)
	# –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º, —Å–Ω–∏–º–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ job'—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç
	ev_id = int(event["id"])
	if count_distinct_reviews(ev_id) >= 3:
		mark_event_completed(ev_id)
		# —Å–Ω—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		for job_name in (f"daily_reviews_{ev_id}",):
			for job in context.job_queue.get_jobs_by_name(job_name):
				job.schedule_removal()
		try:
			await context.bot.send_message(
				chat_id=event["chat_id"],
				text=f"–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ 3 –æ—Ç–∑—ã–≤–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {event['r_name']}. –°–ø–∞—Å–∏–±–æ!",
			)
		except Exception:
			pass
	await message.reply_text(reply_msg)


async def cancel_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	"""–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
	chat = update.effective_chat
	user = update.effective_user
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	is_admin = False
	try:
		member = await context.bot.get_chat_member(chat_id=chat.id, user_id=user.id)
		is_admin = member.status in ("creator", "administrator")
	except Exception as e:
		logger.error(f"Failed to check admin status: {e}")
	
	if not is_admin and chat.type in ("group", "supergroup"):
		await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
		return
	
	event = get_latest_event_for_chat(chat.id)
	if not event:
		await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		return
	
	event_id = int(event["id"])
	for job_name in (f"reminder_{event_id}", f"feedback_{event_id}", f"daily_reviews_{event_id}"):
		for job in context.job_queue.get_jobs_by_name(job_name):
			job.schedule_removal()
	delete_event_with_relations(event_id)

	# —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	message_id = event["message_id"]
	try:
		await context.bot.delete_message(chat_id=chat.id, message_id=message_id)
	except Exception as e:
		logger.debug(f"Failed to delete event message {message_id}: {e}")

	await update.message.reply_text("–°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —á–µ—Ä–µ–∑ /random_restaurant")
	logger.info(f"Event {event_id} deleted by admin {user.id}")


async def clear_reviews_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	"""–û—á–∏—â–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤). –§–æ—Ä–º–∞—Ç: /clear_reviews –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
	logger.info(f"clear_reviews_cmd called by user {update.effective_user.id}")
	chat = update.effective_chat
	user = update.effective_user
	
	is_admin = False
	try:
		member = await context.bot.get_chat_member(chat_id=chat.id, user_id=user.id)
		is_admin = member.status in ("creator", "administrator")
		logger.info(f"User {user.id} admin status: {is_admin}, status: {member.status}")
	except Exception as e:
		logger.error(f"Failed to check admin status: {e}")
	
	if not is_admin and chat.type in ("group", "supergroup"):
		await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å –æ—Ç–∑—ã–≤—ã.")
		return
	
	args_text = (update.message.text or "").strip()
	parts = args_text.split(maxsplit=1)
	if len(parts) < 2:
		await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /clear_reviews –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /clear_reviews Twins Garden")
		return
	
	restaurant_name = parts[1].strip()
	logger.info(f"Clearing reviews for restaurant: '{restaurant_name}'")
	deleted_count = clear_reviews_by_restaurant_name(restaurant_name)
	
	if deleted_count > 0:
		await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {deleted_count} –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant_name}'")
		logger.info(f"Admin {user.id} cleared {deleted_count} reviews for '{restaurant_name}'")
	else:
		await update.message.reply_text(f"‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")


async def on_reviews_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data or ""
    if not data.startswith("reviews:"):
        await query.answer()
        return

    parts = data.split(":", 2)
    if len(parts) != 3:
        await query.answer()
        return

    _, event_id_str, mode = parts
    try:
        event_id = int(event_id_str)
    except ValueError:
        await query.answer()
        return

    event = get_event_with_details(event_id)
    if not event:
        await query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    reviews = get_reviews_for_event(event_id)
    show_reviews = mode == "show"
    text = _format_event_text(event, reviews, include_reviews=show_reviews)
    keyboard = _build_reviews_keyboard(event_id, show_reviews=show_reviews)

    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            parse_mode=constants.ParseMode.HTML,
            reply_markup=keyboard,
        )
    except Exception as e:
        logger.error(f"Failed to toggle reviews for event {event_id}: {e}")
    await query.answer()


## –£–¥–∞–ª—ë–Ω reviews_ –∫–æ–º–∞–Ω–¥–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ toggler –∫–Ω–æ–ø–∫–∏


async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	# –Ω–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	keyboard = ReplyKeyboardMarkup(
		[
			[KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")],
			[KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
			[KeyboardButton("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è")],
		],
		resize_keyboard=True,
		one_time_keyboard=False,
	)
	inline = InlineKeyboardMarkup(
		[
			[
				InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="menu:random"),
			],
			[
				InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats"),
			],
			[
				InlineKeyboardButton("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="menu:upcoming"),
			],
		]
	)
	await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
	await update.message.reply_text("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline)


async def on_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	text = (update.message.text or "").strip().lower()
	# –∞–ª–∏–∞—Å—ã –±–µ–∑ —Å–ª–µ—à–∞ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º privacy —É –±–æ—Ç–∞)
	if text in ("start", "—Å—Ç–∞—Ä—Ç", "help", "–ø–æ–º–æ—â—å"):
		await start(update, context)
		return
	if text in ("menu", "–º–µ–Ω—é"):
		await menu_cmd(update, context)
		return
	if text in ("–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è", "upcoming", "upcomming"):
		await upcoming_cmd(update, context)
		return
	# –¢–û–õ–¨–ö–û —Ç–æ—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
	if text in ("üé≤ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "—Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"):
		await random_restaurant(update, context)
		return
	if text in ("üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
		await stats_cmd(update, context)
		return
	# —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è" –∫–Ω–æ–ø–∫–æ–π


async def upcoming_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
	"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è."""
	await _send_upcoming_for_chat(context, update.effective_chat.id)


async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data or ""
    chat_id = query.message.chat_id if query.message else update.effective_chat.id
    if data == "menu:random":
        await _send_random_for_chat(context, chat_id)
        await query.answer()
        return
    if data == "menu:stats":
        await _send_stats_for_chat(context, chat_id)
        await query.answer()
        return
    if data == "menu:upcoming":
        await _send_upcoming_for_chat(context, chat_id)
        await query.answer()
        return
    await query.answer()


async def _startup(application: Application) -> None:
	# —Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—ã –ë–î
	init_db()
	migrate_schema()
	await _ensure_initial_import(application)
	# —É–±–∏—Ä–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–ø–æ –ø—Ä–æ—Å—å–±–µ) –∏ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ
	cleanup_demo_data()
	# –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
	await application.bot.set_my_commands([
		BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
		BotCommand("random_restaurant", "–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"),
		BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
		BotCommand("upcoming", "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è"),
		BotCommand("cancel_event", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"),
		BotCommand("clear_reviews", "–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"),
	])
	# –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
	now = datetime.now(timezone.utc)
	restored_reminders = 0
	for ev in get_due_reminders(now + timedelta(days=365)):
		if ev["reminder_at_utc"] and int(ev["reminder_sent"]) == 0:
			try:
				dt = datetime.fromisoformat(ev["reminder_at_utc"]).replace(tzinfo=timezone.utc)
				when = max(dt, now)
				ev_id = int(ev["id"])
				for job in application.job_queue.get_jobs_by_name(f"reminder_{ev_id}"):
					job.schedule_removal()
				application.job_queue.run_once(send_reminder_job, when=when, data={"event_id": ev_id}, name=f"reminder_{ev_id}")
				restored_reminders += 1
			except Exception as e:
				logger.error(f"Failed to restore reminder for event {ev['id']}: {e}")
	logger.info(f"Restored {restored_reminders} reminders")
	
	restored_feedback = 0
	for ev in get_all_feedback_to_schedule():
		try:
			ev_id = int(ev["id"])
			dt = datetime.fromisoformat(ev["reminder_at_utc"]).replace(tzinfo=timezone.utc) + timedelta(hours=3)
			when = max(dt, now)
			for job in application.job_queue.get_jobs_by_name(f"feedback_{ev_id}"):
				job.schedule_removal()
			application.job_queue.run_once(send_feedback_prompt_job, when=when, data={"event_id": ev_id}, name=f"feedback_{ev_id}")
			# –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
			dt_remind = datetime.fromisoformat(ev["reminder_at_utc"]).replace(tzinfo=timezone.utc) + timedelta(days=1)
			when_remind = max(dt_remind, now)
			for job in application.job_queue.get_jobs_by_name(f"daily_reviews_{ev_id}"):
				job.schedule_removal()
			application.job_queue.run_repeating(
				remind_pending_reviews_job,
				interval=timedelta(days=1),
				first=when_remind,
				data={"event_id": ev_id},
				name=f"daily_reviews_{ev_id}",
			)
			restored_feedback += 1
		except Exception as e:
			logger.error(f"Failed to restore feedback job for event {ev['id']}: {e}")
	logger.info(f"Restored {restored_feedback} feedback jobs")


def build_app() -> Application:
	if not BOT_TOKEN:
		raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
	application = ApplicationBuilder().token(BOT_TOKEN).post_init(_startup).build()
	application.bot_data["timezone"] = TIMEZONE
	application.add_handler(CommandHandler("start", start))
	application.add_handler(CommandHandler("menu", menu_cmd))
	application.add_handler(CommandHandler("random_restaurant", random_restaurant))
	application.add_handler(CommandHandler("set_reminder", set_reminder_cmd))
	application.add_handler(CommandHandler("stats", stats_cmd))
	application.add_handler(CommandHandler("upcoming", upcoming_cmd))
	application.add_handler(CommandHandler("cancel_event", cancel_event_cmd))
	application.add_handler(CommandHandler("clear_reviews", clear_reviews_cmd))
	application.add_handler(CallbackQueryHandler(on_join_toggle, pattern=r"^join:"))
	application.add_handler(CallbackQueryHandler(on_cancel_trip, pattern=r"^cancel:"))
	application.add_handler(CallbackQueryHandler(on_reset_event, pattern=r"^reset:"))
	application.add_handler(CallbackQueryHandler(on_reviews_toggle, pattern=r"^reviews:"))
	application.add_handler(CallbackQueryHandler(on_menu_click, pattern=r"^menu:"))
	application.add_handler(MessageHandler(filters.Document.ALL, on_document))
	# —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ DD.MM.YYYY HH:MM (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π regex: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ : . - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏)
	application.add_handler(MessageHandler(filters.Regex(r"^\s*\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}[:\.\-]\d{2}\s*$") & ~filters.REPLY, on_freeform_datetime))
	# reviews_ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º toggler
	application.add_handler(MessageHandler(filters.TEXT & ~filters.REPLY, on_menu_text))
	application.add_handler(MessageHandler(filters.TEXT & filters.REPLY, on_text_review))
	return application


def main() -> None:
	application = build_app()
	# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
	async def _on_error(update: object, context_: ContextTypes.DEFAULT_TYPE) -> None:
		logger.exception("Unhandled error", exc_info=context_.error)
	application.add_error_handler(_on_error)
	if WEBHOOK_BASE_URL:
		# webhook —Ä–µ–∂–∏–º
		url_path = WEBHOOK_PATH.rstrip("/") + "/" + (os.getenv("WEBHOOK_SECRET", "tg") )
		webhook_url = WEBHOOK_BASE_URL.rstrip("/") + url_path
		application.run_webhook(
			listen="0.0.0.0",
			port=PORT,
			url_path=url_path,
			webhook_url=webhook_url,
		)
	else:
		# –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî long polling
		application.run_polling()


if __name__ == "__main__":
	main()
