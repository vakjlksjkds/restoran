#!/usr/bin/env python3
"""
Simple Restaurant Bot - Working Version for Hosting
Based on working project structure
"""

import os
import asyncio
import logging
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN", "8245055843:AAEpOGcGRbvy1TkfQx4Jj2rAqQB15CbxQp0")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "800133246"))
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "")
REQUIRED_CONFIRMATIONS = 3  # 3 —á–µ–ª–æ–≤–µ–∫–∞ + –±–æ—Ç = 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ

class SimpleRestaurantBot:
    def __init__(self):
        self.db_path = "restaurant_bot.db"
        self.restaurants = []
        self.init_database()
        self.load_restaurants()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS restaurants (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                address TEXT,
                cuisine TEXT,
                description TEXT,
                average_check TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                restaurant_name TEXT NOT NULL,
                datetime TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS confirmations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                confirmed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (event_id) REFERENCES events (id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                rating INTEGER NOT NULL,
                comment TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (event_id) REFERENCES events (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database initialized")
        
    def load_restaurants(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ JSON"""
        try:
            with open('restaurants.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã JSON
            if isinstance(data, list):
                self.restaurants = data
            elif isinstance(data, dict) and 'restaurants' in data:
                self.restaurants = data['restaurants']
            else:
                self.restaurants = []
                
            logger.info(f"‚úÖ Loaded {len(self.restaurants)} restaurants")
        except Exception as e:
            logger.error(f"‚ùå Error loading restaurants: {e}")
            self.restaurants = []
            
    def get_active_event(self, chat_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM events 
            WHERE chat_id = ? AND status IN ('pending', 'scheduled', 'review_requested')
            ORDER BY created_at DESC LIMIT 1
        ''', (chat_id,))
        
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return {
                'id': row[0],
                'chat_id': row[1],
                'restaurant_name': row[2],
                'datetime': row[3],
                'status': row[4],
                'created_at': row[5]
            }
        return None
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id == ADMIN_USER_ID

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üçΩÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Perfect Restaurant Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/random - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
/next_event - –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
/cancel_event - –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
/clear_reviews - –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
2. –í—Å–µ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
4. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
5. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç¥
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def random_restaurant(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /random"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        active_event = self.get_active_event(chat_id)
        if active_event:
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"cancel_event_{active_event['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n"
                f"üçΩÔ∏è **{active_event['restaurant_name']}**\n"
                f"üìÖ –°—Ç–∞—Ç—É—Å: {active_event['status']}\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
            
        if not self.restaurants:
            await update.message.reply_text("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        import random
        restaurant = random.choice(self.restaurants)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO events (chat_id, restaurant_name, status)
            VALUES (?, ?, 'pending')
        ''', (chat_id, restaurant['name']))
        
        event_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        card_text = f"""
üçΩÔ∏è **{restaurant['name']}**

üìç **–ê–¥—Ä–µ—Å:** {restaurant.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üç¥ **–ö—É—Ö–Ω—è:** {restaurant.get('cuisine', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üí∞ **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {restaurant.get('average_check', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {restaurant.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

üë• **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** 0/{REQUIRED_CONFIRMATIONS}
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –∏–¥—É!", callback_data=f"confirm_{event_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"cancel_event_{event_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            card_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def confirm_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è"""
        query = update.callback_query
        await query.answer()
        
        event_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            SELECT id FROM confirmations 
            WHERE event_id = ? AND user_id = ?
        ''', (event_id, user_id))
        
        if cursor.fetchone():
            await query.edit_message_text(
                "‚úÖ –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏!"
            )
            conn.close()
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        cursor.execute('''
            INSERT INTO confirmations (event_id, user_id, username)
            VALUES (?, ?, ?)
        ''', (event_id, user_id, username))
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cursor.execute('''
            SELECT COUNT(*) FROM confirmations WHERE event_id = ?
        ''', (event_id,))
        
        confirmations_count = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        cursor.execute('''
            SELECT restaurant_name FROM events WHERE id = ?
        ''', (event_id,))
        
        restaurant_name = cursor.fetchone()[0]
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        card_text = f"""
üçΩÔ∏è **{restaurant_name}**

üë• **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** {confirmations_count}/{REQUIRED_CONFIRMATIONS}

‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**
        """
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT username FROM confirmations WHERE event_id = ? ORDER BY confirmed_at
        ''', (event_id,))
        
        participants = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        for i, participant in enumerate(participants, 1):
            card_text += f"\n{i}. {participant}"
            
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –∏–¥—É!", callback_data=f"confirm_{event_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"cancel_event_{event_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            card_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if confirmations_count >= REQUIRED_CONFIRMATIONS:
            await query.message.reply_text(
                "üéâ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!\n\n"
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "**–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú**\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2025 19:00"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE events SET status = 'scheduled' WHERE id = ?
            ''', (event_id,))
            conn.commit()
            conn.close()

    async def cancel_event_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        query = update.callback_query
        await query.answer()
        
        event_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not self.is_admin(user_id):
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
            return
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM confirmations WHERE event_id = ?', (event_id,))
        cursor.execute('DELETE FROM reviews WHERE event_id = ?', (event_id,))
        cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
        
        conn.commit()
        conn.close()
        
        await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        chat_id = update.effective_chat.id
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM restaurants')
        total_restaurants = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT COUNT(DISTINCT restaurant_name) FROM events 
            WHERE chat_id = ? AND status = 'completed'
        ''', (chat_id,))
        visited_restaurants = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM events WHERE chat_id = ?', (chat_id,))
        total_events = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT COUNT(*) FROM events 
            WHERE chat_id = ? AND status = 'completed'
        ''', (chat_id,))
        completed_events = cursor.fetchone()[0]
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        visited_percentage = (visited_restaurants / total_restaurants * 100) if total_restaurants > 0 else 0
        completed_percentage = (completed_events / total_events * 100) if total_events > 0 else 0
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤**

üçΩÔ∏è **–í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:** {total_restaurants}
‚úÖ **–ü–æ—Å–µ—â–µ–Ω–æ:** {visited_restaurants} ({visited_percentage:.1f}%)
üìÖ **–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:** {total_events}
üéØ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {completed_events} ({completed_percentage:.1f}%)

üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:**
        """
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        cursor.execute('''
            SELECT r.restaurant_name, r.rating, r.comment, r.username, r.created_at
            FROM reviews r
            JOIN events e ON r.event_id = e.id
            WHERE e.chat_id = ?
            ORDER BY r.created_at DESC
            LIMIT 5
        ''', (chat_id,))
        
        reviews = cursor.fetchall()
        conn.close()
        
        if reviews:
            for review in reviews:
                restaurant_name, rating, comment, username, created_at = review
                stars = "‚≠ê" * rating
                stats_text += f"\nüçΩÔ∏è **{restaurant_name}** {stars}\nüë§ {username}: {comment}\n"
        else:
            stats_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."
            
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def next_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /next_event"""
        chat_id = update.effective_chat.id
        active_event = self.get_active_event(chat_id)
        
        if not active_event:
            await update.message.reply_text("üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
            
        status_text = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π',
            'scheduled': 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            'review_requested': 'üìù –û–∂–∏–¥–∞–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'
        }
        
        event_text = f"""
üìÖ **–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ:**

üçΩÔ∏è **–†–µ—Å—Ç–æ—Ä–∞–Ω:** {active_event['restaurant_name']}
üìä **–°—Ç–∞—Ç—É—Å:** {status_text.get(active_event['status'], active_event['status'])}
        """
        
        if active_event['datetime']:
            event_text += f"\nüïê **–í—Ä–µ–º—è:** {active_event['datetime']}"
            
        await update.message.reply_text(event_text, parse_mode='Markdown')

    async def cancel_event_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cancel_event (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
            
        chat_id = update.effective_chat.id
        active_event = self.get_active_event(chat_id)
        
        if not active_event:
            await update.message.reply_text("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM confirmations WHERE event_id = ?', (active_event['id'],))
        cursor.execute('DELETE FROM reviews WHERE event_id = ?', (active_event['id'],))
        cursor.execute('DELETE FROM events WHERE id = ?', (active_event['id'],))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    async def clear_reviews_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear_reviews (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
            
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM reviews')
        conn.commit()
        conn.close()
        
        await update.message.reply_text("üóëÔ∏è –í—Å–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã.")

    async def handle_datetime_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
        chat_id = update.effective_chat.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        active_event = self.get_active_event(chat_id)
        if not active_event or active_event['status'] != 'scheduled':
            return
            
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
            datetime.strptime(text, "%d.%m.%Y %H:%M")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE events SET datetime = ? WHERE id = ?
            ''', (text, active_event['id']))
            conn.commit()
            conn.close()
            
            await update.message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{text}**\n\n"
                f"üçΩÔ∏è **{active_event['restaurant_name']}**\n"
                f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {text}\n\n"
                f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç¥",
                parse_mode='Markdown'
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: **–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú**\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2025 19:00",
                parse_mode='Markdown'
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üçΩÔ∏è Starting Simple Restaurant Bot...")
    
    bot = SimpleRestaurantBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("random", bot.random_restaurant))
    application.add_handler(CommandHandler("stats", bot.stats))
    application.add_handler(CommandHandler("next_event", bot.next_event))
    application.add_handler(CommandHandler("cancel_event", bot.cancel_event_admin))
    application.add_handler(CommandHandler("clear_reviews", bot.clear_reviews_admin))
    
    application.add_handler(CallbackQueryHandler(bot.confirm_attendance, pattern="^confirm_"))
    application.add_handler(CallbackQueryHandler(bot.cancel_event_callback, pattern="^cancel_event_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_datetime_message))
    
    print("ü§ñ Bot started successfully!")
    print("üì± Add bot to your group and use /start command")
    print("üõë Press Ctrl+C to stop")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüëã Bot stopped by user")

if __name__ == "__main__":
    main()
